datatype event = E
// Cannot define an event type. Use :event to set the value of the event.

datatype dx = DX(event)
// 1:18:Unbound type event.

:event E

datatype d = D(event)

:event E | Q

D(Q)
// 1:1:Unbound variable `D`

:event E

function kek() = Chain.event(E)
// Warning: defining functions in REPL is WIP and may be unstable.

:event QW(int)

kek()
// 1:1:Unbound variable `kek`

:event E

let v = E : event

function f() = E : event
// Warning: defining functions in REPL is WIP and may be unstable.

v
// E

:t v
// #mock_contract#INTERNAL_REPL.event

f()
// E

:t f
// () => #mock_contract#INTERNAL_REPL.event

:event Q | W

:t v
// 1:2:Unbound variable `v`

:t f
// 1:2:Unbound variable `f`

:event E1(int) | E2(string)

Chain.event(E1(1))

Chain.event(E2("str"))

type t = int

:event E(t)

type t = string

Chain.event(E(1))

Chain.event(E("str"))
