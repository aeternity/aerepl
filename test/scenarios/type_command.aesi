{ ":t 1"
, {match, {id, '_', "int"}}
}.

{ ":t Call.origin"
, {match, {id, '_', "address"}}
}.

{ ":t #fedcba9876543210"
, {match, {app_t, '_', {id, '_', "bytes"}, [{int, '_', 8}]}}
}.

{ ":t \"some string\""
, {match, {id, '_', "string"}}
}.

{ ":t [1, 2, 3]"
, {match, {app_t, '_', {id, '_', "list"}, [{id, '_', "int"}]}}
}.

{ ":t (x : int, y : int) => x + y"
, {match, {fun_t, '_', [], [{id, '_', "int"}, {id, '_', "int"}], {id, '_', "int"}}
}

{ ":t (42, \"Foo\", true)"
, {match, {tuple_t, '_', [{id, '_', "int"}, {id, '_', "string"}, {id, '_', "bool"}]}
}.

"type accounts = map(string, address)".

"let x : accounts = {}".

{ ":t x"
, {match, {app_t, '_', {id, '_', "map"}, [{id, '_', "int"},{id, '_', "int"}]}
}.

{ ":t Oracle.query"
, {match,
  { fun_t, '_', []
  , [ {app_t, '_', {id, '_', "oracle"}, [{tvar, '_', '$1'}, {tvar, '_', '$2'}]}
    , {tvar, '_', '$1'}
    , {id, '_', "int"}
    , {qid, '_', ["Chain", "ttl"]}
    , {qid, '_', ["Chain", "ttl"]}
    ]
  , {app_t, '_', {id, '_', "oracle"}, [{tvar, '_', '$1'}, {tvar, '_', '$2'}]}
  }
}.

{ ":t RelativeTTL(50)"
, {match, {qid, '_', ["Chain", "ttl"]}}
}.

"record balance = { owner: address, value: int }".

"let x = { owner = Call.origin, value = 1".

{ ":t x"
, {match, {id, '_', "balance"}}
}.
