#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -setcookie aerepl_cookie -mnesia debug verbose


-export([aerepl/1]).
-mode(compile).

main(Args) ->
    load_paths(),
    argparse:run(Args, cli(), #{progname => "aerepl"}).


cli() ->
    #{
      handler => {?MODULE, aerepl},
      arguments =>
          [ #{name => accounts, long => "account", short => $a, nargs => 2, action => append,
              default => [], type => {custom, fun parse_account/1}}
          , #{name => call_gas, long => "call_gas", type => {integer, [{min, 0}]}}
          , #{name => call_value, long => "call_value", type => {integer, [{min, 0}]}}
          , #{name => call_gas_price, long => "call_gas_price", type => {integer, [{min, 0}]}}
          , #{name => call_origin, long => "call_origin"}
          , #{name => call_contract_creator, long => "call_contract_creator"}
          , #{name => call_fee, long => "call_fee", type => {integer, [{min, 0}]}}
          , #{name => call_height, long => "call_height", type => {integer, [{min, 1}]}}
          , #{name => print_gas, long => "print_gas", type => boolean}
          , #{name => print_format, long => "print_format", type => {atom, [sophia,json,fate]}}
          , #{name => print_unit, long => "print_unit", type => boolean}
          , #{name => print_type, long => "print_type", type => boolean}
          , #{name => loc_forwards, long => "loc_forwards", type => {integer, [{min, 0}]}}
          , #{name => loc_backwards, long => "loc_backwards", type => {integer, [{min, 0}]}}
          ]}.

% Parses either account pk or balance. Argparse does not let it do better...
parse_account(X) ->
    try list_to_integer(X) of
        Balance ->
            {balance, Balance}
    catch error:badarg ->
            PKEnc = list_to_binary(X),
            case aeser_api_encoder:safe_decode(account_pubkey, PKEnc) of
                {ok, PK} ->
                    {pubkey, PK};
                _ ->
                    error({badarg, X})
            end
    end.

load_paths() ->
    ScriptDir = filename:dirname(escript:script_name()),
    Paths = filelib:wildcard("_build/prod/lib/*/ebin/", ScriptDir),
    [code:add_pathz(filename:append(ScriptDir, Path))
     orelse error({not_found, filename:append(ScriptDir, Path)})
     || Path <- Paths],
    ok.

aerepl(Args) ->
    Accounts =
        [ maps:from_list(AccountSpec)
         || AccountSpec <- maps:get(accounts, Args, [])
        ],
    Opts = maps:remove(accounts, Args),
    aerepl(Accounts, Opts).

aerepl(Accounts, Opts) ->
    {ok, _Sup} = aere_supervisor:start_link([{accounts, Accounts}, {options, Opts}]),
    Banner = aere_gen_server:banner(),
    BannerStr = aere_gen_server:render(Banner),
    io:format("~s\n\n", [BannerStr]),
    loop().

loop() ->
    Input = get_input(),
    try aere_gen_server:input(Input) of
        finish ->
            finish;
        Res ->
            print_msg(Res),
            loop()
    catch
        _:E:Stack ->
            print_msg(aere_theme:render(aere_msg:internal_error(E, Stack))),
            loop()
    end.

print_msg(ok) -> ok;
print_msg(<<"">>) -> ok;
print_msg(Msg) when is_binary(Msg) ->
    io:format("~s\n", [Msg]);
print_msg(Item) ->
    Msg = aere_gen_server:format(Item),
    Str = aere_gen_server:render(Msg),
    print_msg(Str).


%% Get single line or multiline input from the user and return it as a single string
-spec get_input() -> string().
get_input() ->
    Prompt = aere_gen_server:prompt(),
    Line =
        case io:get_line(binary:bin_to_list(Prompt) ++ "> ") of
            eof          -> ":quit"; % that's dirty
            {error, Err} -> exit(Err);
            Data         -> Data
        end,
    Input =
        case string:trim(Line, both, unicode_util:whitespace()) of
            ":{" -> multiline_input();
            ""   -> "";
            _    -> lists:flatten(string:replace(Line, ";", "\n", all))
        end,
    string:trim(Input, both, unicode_util:whitespace()).

-spec multiline_input() -> string().
multiline_input() -> multiline_input([]).

%% Keep reading input lines until :} is found. Return the code between :{ and :} as a single string
-spec multiline_input([string()]) -> string().
multiline_input(CodeBlock) ->
    Line = io:get_line("| "),
    case string:trim(Line, both, unicode_util:whitespace()) of
        ":}" -> lists:flatten(lists:reverse(CodeBlock));
        _    -> multiline_input([Line|CodeBlock])
    end.
