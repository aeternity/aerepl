#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -setcookie aerepl_cookie -mnesia debug verbose
-mode(compile).

load_paths() ->
    ScriptDir = filename:dirname(escript:script_name()),
    Paths = filelib:wildcard("_build/prod/lib/*/ebin/", ScriptDir),
    [code:add_pathz(filename:append(ScriptDir, Path))
     orelse error({not_found, filename:append(ScriptDir, Path)})
     || Path <- Paths],
    ok.

main(_Args) ->
    load_paths(),
    {ok, _Sup} = aere_supervisor:start_link([{options, #{return_mode => render}}]),
    start().

start() ->
    Banner = aere_gen_server:banner(),
    io:format("~s\n\n", [Banner]),
    loop().

loop() ->
    Input = get_input(),
    try aere_gen_server:input(Input) of
        {ok, finish} ->
            finish;
        {ok, Msg} ->
            print_msg(Msg),
            loop();
        {error, Err} ->
            print_msg(Err),
            loop()
    catch
        _:E:Stack ->
            print_msg(aere_theme:render(aere_msg:internal(E, Stack))),
            loop()
    end.

print_msg(ok) -> ok;
print_msg(<<"">>) -> ok;
print_msg({error, Msg}) ->
    io:format("~s\n", [Msg]);
print_msg(Msg) ->
    io:format("~s\n", [Msg]).


%% Get single line or multiline input from the user and return it as a single string
-spec get_input() -> string().
get_input() ->
    Prompt = aere_gen_server:prompt(),
    Line =
        case io:get_line(Prompt ++ "> ") of
            eof          -> ":quit"; % that's dirty
            {error, Err} -> exit(Err);
            Data         -> Data
        end,
    Input =
        case string:trim(Line, both, unicode_util:whitespace()) of
            ":{" -> multiline_input();
            ""   -> "";
            _    -> lists:flatten(string:replace(Line, ";", "\n", all))
        end,
    string:trim(Input, both, unicode_util:whitespace()).

-spec multiline_input() -> string().
multiline_input() -> multiline_input([]).

%% Keep reading input lines until :} is found. Return the code between :{ and :} as a single string
-spec multiline_input([string()]) -> string().
multiline_input(CodeBlock) ->
    Line = io:get_line("| "),
    case string:trim(Line, both, unicode_util:whitespace()) of
        ":}" -> lists:flatten(lists:reverse(CodeBlock));
        _    -> multiline_input([Line|CodeBlock])
    end.
